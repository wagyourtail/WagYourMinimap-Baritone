
def urlFile = { url, name, version ->
    File file = new File("$rootDir/libs/${name}-${version}.jar")
    file.parentFile.mkdirs()
    if (!file.exists()) {
        new URL(url).withInputStream { downloadStream ->
            file.withOutputStream { fileOut ->
                fileOut << downloadStream
            }
        }
    }
    return [name: name, version: version]
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury:${rootProject.architectury_version}"
    modApi "com.github.wagyourtail.WagYourMinimap:wagyourminimap-1.18:${rootProject.minimap_version}"
    modApi urlFile("https://github.com/cabaletta/baritone/releases/download/v$baritone_version/baritone-unoptimized-fabric-${baritone_version}.jar", "baritone-unoptimized-fabric", baritone_version)
}

architectury {
    common()
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
